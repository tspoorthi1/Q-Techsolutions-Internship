import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
import math
from sklearn.model_selection import train_test_split,cross_val_score,KFold
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, r2_score
data = pd.read_csv('housing.csv')
data
data.info()
data.describe()
data.dropna(inplace=True)
data.info()
print(data.columns)

data.columns = data.columns.str.strip()

x=data.drop(['housing_median_age'],axis=1)
y=data['housing_median_age']
x
y
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)
train_data=x_train.join(y_train)
train_data
train_data.hist(figsize=(15,8))
corr_matrix=train_data.corr(numeric_only=True)
sns.heatmap(corr_matrix, annot=True,cmap="YlGnBu")
correlations_with_target = corr_matrix['median_house_value'].sort_values(ascending=False)
print(correlations_with_target)
train_data['total_rooms']=np.log(train_data['total_rooms']+1)
train_data['total_bedrooms']=np.log(train_data['total_bedrooms']+1)
train_data['population']=np.log(train_data['population']+1)
train_data['households']=np.log(train_data['households']+1)
train_data.hist(figsize=(15,8))
train_data.ocean_proximity.value_counts()
train_data=train_data.join(pd.get_dummies(train_data.ocean_proximity)).drop(['ocean_proximity'],axis=1)
train_data
corr_matrix=train_data.corr(numeric_only=True)
plt.figure(figsize=(15, 8))
sns.heatmap(corr_matrix, annot=True,cmap="YlGnBu")
plt.figure(figsize=(15,8))
sns.scatterplot(x="latitude",y="longitude",data=train_data,hue="median_house_value",palette="coolwarm")
train_data['bedroom_ratio']=train_data['total_bedrooms']/train_data['total_rooms']
train_data['household_rooms']=train_data['total_rooms']/train_data['households']
corr_matrix=train_data.corr(numeric_only=True)
plt.figure(figsize=(15, 8))
sns.heatmap(corr_matrix, annot=True,cmap="YlGnBu")
x_train,y_train=train_data.drop(['median_house_value'],axis=1),train_data['median_house_value']

reg=LinearRegression()

reg.fit(x_train,y_train)

model=LinearRegression()
kf = KFold(n_splits=5, shuffle=True, random_state=42)
cv_scores = cross_val_score(model, x_train, y_train, cv=kf, scoring='neg_mean_squared_error')
cv_rmse_scores = []
for train_index, val_index in kf.split(x_train):
    x_train_fold, x_val_fold = x_train.iloc[train_index], x_train.iloc[val_index]
    y_train_fold, y_val_fold = y_train.iloc[train_index], y_train.iloc[val_index]
model.fit(x_train_fold,y_train_fold)
y_pred = model.predict(x_val_fold)
rmse = mean_squared_error(y_val_fold, y_pred, squared=False)
cv_rmse_scores.append(rmse)
print(f'Cross-Validation RMSE Scores: {cv_rmse_scores}')
print(f'Average Cross-Validation RMSE: {np.mean(cv_rmse_scores)}')
test_data=x_test.join(y_test)

test_data['total_rooms']=np.log(test_data['total_rooms']+1)
test_data['total_bedrooms']=np.log(test_data['total_bedrooms']+1)
test_data['population']=np.log(test_data['population']+1)
test_data['households']=np.log(test_data['households']+1)

test_data=test_data.join(pd.get_dummies(test_data.ocean_proximity)).drop(['ocean_proximity'],axis=1)

test_data['bedroom_ratio']=test_data['total_bedrooms']/test_data['total_rooms']
test_data['household_rooms']=test_data['total_rooms']/test_data['households']
x_test,y_test=test_data.drop(['median_house_value'],axis=1),test_data['median_house_value']
x_test
scaler = StandardScaler()
x_train_scaled = scaler.fit_transform(x_train)
x_test_scaled = scaler.transform(x_test)
x_train_scaled_df = pd.DataFrame(x_train_scaled, columns=x_train.columns)
x_test_scaled_df = pd.DataFrame(x_test_scaled, columns=x_test.columns)
model = LinearRegression()
model.fit(x_train_scaled,y_train)
print(pd.DataFrame(x_train_scaled).describe())
print(pd.DataFrame(x_test_scaled).describe())
print("Columns in x_train:", x_train.columns)
print("Columns in x_test:",x_test.columns)
x_test,y_test=test_data.drop(['median_house_value'],axis=1),test_data['median_house_value']

reg.score(x_test,y_test)
model = LinearRegression()
model.fit(x_train,y_train)
y_pred = model.predict(x_test)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("Mean Squared Error:", mse)
print("Root Mean Squared Error:", rmse)
print("R-squared_Score:",r2)
regressor = LinearRegression()
regressor.fit(x_train,y_train)
y_pred = regressor.predict(x_test)
predictions = model.predict(x_test)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)
print("Predicted house prices:", predictions)
plt.figure(figsize=(15, 10))
plt.scatter(y_test, y_pred, color='red', edgecolor='w', s=40)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='blue', linestyle='-')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()
