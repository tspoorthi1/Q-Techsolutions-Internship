import smtplib
import re
import logging
from datetime import datetime, timedelta
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

# Set up logging
logging.basicConfig(filename='interview_scheduler.log', level=logging.INFO)

# Email credentials (update these with your credentials)
FROM_EMAIL = 'sahithi123.y@gmail.com'
EMAIL_PASSWORD = 'sahithi2003'

# Function to validate email
def validate_email(email):
    pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    return re.match(pattern, email)

# Function to send email notification
def send_email(to_email, subject, body):
    msg = MIMEMultipart()
    msg['From'] = FROM_EMAIL
    msg['To'] = to_email
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))

    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login(FROM_EMAIL, EMAIL_PASSWORD)
        server.sendmail(FROM_EMAIL, to_email, msg.as_string())
        server.quit()
        logging.info(f"Email sent to {to_email}")
        print(f"Email sent to {to_email}")
    except smtplib.SMTPException as e:
        logging.error(f"Failed to send email: {e}")
        print(f"Failed to send email: {e}")

# Function to find common available slots
def find_common_slots(candidate_slots, interviewer_slots):
    return [slot for slot in candidate_slots if slot in interviewer_slots]

# Function to schedule an interview
def schedule_interview(candidate_name, candidate_email, candidate_slots, interviewer_slots):
    common_slots = find_common_slots(candidate_slots, interviewer_slots)
    
    if not common_slots:
        print("No common available slots between candidate and interviewer.")
        logging.info(f"No common slots for {candidate_name}")
        return
    
    print("Available slots:")
    for i, slot in enumerate(common_slots):
        print(f"{i + 1}: {slot.strftime('%Y-%m-%d %H:%M')}")

    try:
        slot_choice = int(input(f"Choose a slot for {candidate_name} (1-{len(common_slots)}): ")) - 1
        if 0 <= slot_choice < len(common_slots):
            chosen_slot = common_slots[slot_choice]
            subject = "Interview Scheduled"
            body = f"Dear {candidate_name},\n\nYour interview has been scheduled for {chosen_slot.strftime('%Y-%m-%d %H:%M')}.\n\nBest regards,\nHR Team"
            send_email(candidate_email, subject, body)
            print(f"Interview scheduled for {candidate_name} at {chosen_slot.strftime('%Y-%m-%d %H:%M')}.")
        else:
            print("Invalid slot choice.")
    except ValueError:
        print("Invalid input. Please enter a valid number.")

# Function to reschedule an interview
def reschedule_interview(candidate_name, candidate_email, candidate_slots, interviewer_slots):
    print(f"{candidate_name} has requested to reschedule.")
    common_slots = find_common_slots(candidate_slots, interviewer_slots)

    if not common_slots:
        print("No common available slots for rescheduling.")
        logging.info(f"No common slots for rescheduling {candidate_name}")
        return
    
    print("Available slots for rescheduling:")
    for i, slot in enumerate(common_slots):
        print(f"{i + 1}: {slot.strftime('%Y-%m-%d %H:%M')}")
    
    try:
        slot_choice = int(input(f"Choose a new slot for {candidate_name} (1-{len(common_slots)}): ")) - 1
        if 0 <= slot_choice < len(common_slots):
            chosen_slot = common_slots[slot_choice]
            subject = "Interview Rescheduled"
            body = f"Dear {candidate_name},\n\nYour interview has been rescheduled for {chosen_slot.strftime('%Y-%m-%d %H:%M')}.\n\nBest regards,\nHR Team"
            send_email(candidate_email, subject, body)
            print(f"Interview rescheduled for {candidate_name} at {chosen_slot.strftime('%Y-%m-%d %H:%M')}.")
        else:
            print("Invalid slot choice.")
    except ValueError:
        print("Invalid input. Please enter a valid number.")

# Main logic
if __name__ == "__main__":
    # Define candidate and interviewer availability
    candidate_name = "John Doe"
    candidate_email = "johndoe@example.com"
    candidate_slots = [datetime.now() + timedelta(days=1, hours=i) for i in range(10, 14)]  # 10 AM to 1 PM
    interviewer_slots = [datetime.now() + timedelta(days=1, hours=i) for i in range(12, 16)]  # 12 PM to 3 PM

    # Validate candidate's email
    if validate_email(candidate_email):
        # Schedule the interview
        schedule_interview(candidate_name, candidate_email, candidate_slots, interviewer_slots)

        # Ask if rescheduling is needed
        reschedule = input("Would you like to reschedule? (yes/no): ").lower()
        if reschedule == 'yes':
            reschedule_interview(candidate_name, candidate_email, candidate_slots, interviewer_slots)
    else:
        print("Invalid email format.")
        logging.error(f"Invalid email format for {candidate_name}: {candidate_email}")
